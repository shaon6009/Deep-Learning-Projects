import cv2
import pickle
import cvzone
import numpy as np
import os

def process_frame(img, posList, width, height):
    """Processes a single frame/image to check parking spaces."""
    imgGray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    imgBlur = cv2.GaussianBlur(imgGray, (3, 3), 1)
    imgThreshold = cv2.adaptiveThreshold(imgBlur, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY_INV, 25, 16)
    imgMedian = cv2.medianBlur(imgThreshold, 5)
    kernel = np.ones((3, 3), np.uint8)
    imgDilate = cv2.dilate(imgMedian, kernel, iterations=1)

    spaceCounter = 0

    for pos in posList:
        x, y = pos

        imgCrop = imgDilate[y:y + height, x:x + width]
        count = cv2.countNonZero(imgCrop)

        if count < 900:
            color = (0, 255, 0)  # Green for free space
            thickness = 5
            spaceCounter += 1
        else:
            color = (0, 0, 255)  # Red for occupied space
            thickness = 2

        cv2.rectangle(img, pos, (pos[0] + width, pos[1] + height), color, thickness)
        cvzone.putTextRect(img, str(count), (x, y + height - 3), scale=1, thickness=2, offset=0, colorR=color)

    cvzone.putTextRect(img, f'Free: {spaceCounter}/{len(posList)}', (100, 50), scale=3, thickness=5, offset=20, colorR=(0, 200, 0))
    return img

# Load parking space positions
with open('CarParkPos', 'rb') as f:
    posList = pickle.load(f)

width, height = 107, 48

# Input type: Specify 'image' or 'video'
input_type = input("Enter input type ('image' or 'video'): ").strip().lower()

if input_type == 'video':
    video_path = input("Enter the path to the video file: ").strip()
    if not os.path.exists(video_path):
        print("Error: Video file does not exist.")
        exit()

    cap = cv2.VideoCapture(video_path)

    while True:
        # Loop the video if it reaches the end
        if cap.get(cv2.CAP_PROP_POS_FRAMES) == cap.get(cv2.CAP_PROP_FRAME_COUNT):
            cap.set(cv2.CAP_PROP_POS_FRAMES, 0)

        success, img = cap.read()
        if not success:
            break

        img = process_frame(img, posList, width, height)
        cv2.imshow("Parking Space Detection", img)

        # Break the loop when 'q' is pressed
        if cv2.waitKey(10) & 0xFF == ord('q'):
            break

    cap.release()

elif input_type == 'image':
    image_path = input("Enter the path to the image file: ").strip()
    if not os.path.exists(image_path):
        print("Error: Image file does not exist.")
        exit()

    img = cv2.imread(image_path)
    if img is None:
        print("Error: Failed to load image.")
        exit()

    img = process_frame(img, posList, width, height)
    cv2.imshow("Parking Space Detection", img)
    
    # Wait until the user presses 'q' to close the window
    while True:
        if cv2.waitKey(10) & 0xFF == ord('q'):
            break

else:
    print("Error: Invalid input type. Please specify 'image' or 'video'.")
    exit()

cv2.destroyAllWindows()